% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MTVTRouxtype.R
\name{MTVTRouxtypeCA}
\alias{MTVTRouxtypeCA}
\alias{N_upper_MTVTRouxtypeCA}
\title{Functions to construct a strength 4 or strength 5 CA from several input CAs}
\usage{
MTVTRouxtypeCA(t, k, v, method=NULL, ...)

N_upper_MTVTRouxtypeCA(t, k, v, method=NULL, theoretical=FALSE, ...)
}
\arguments{
\item{t}{4 or 5: strength of the CA}

\item{k}{positive integer: number of columns in the result}

\item{v}{positive integer: number of levels}

\item{method}{\code{NULL}, or "large"}

\item{...}{currently not used}

\item{theoretical}{logical: if TRUE, N is calculated from the best known CAs, not from the best implemented ones}
}
\value{
Function \code{MTVTRouxtypeCA} returns a strength \code{t} CA with \code{k} columns at \code{v} levels each, as requested.\cr
\code{N_upper_MTVTRouxtypeCA} returns the size of the constructed CA before removing duplicates.
}
\description{
based on Section 4 of Martirosyan and van Trung (2004). The functions obtain a strength 4
or strength 5 CA in 2k columns at v levels each from several smaller arrays.
}
\section{Details}{


The constructions are based on a strength \code{t} CA A, a strength {t-1} CA B, a strength \code{t-2} CA C
and, for strength 4 with Theorem 4.3 as well as 5, a strength 2 CA D.
These ingredient CAs have c columns at \code{v}, where \code{c=ceiling(k/2)}, except
for Theorem 4.3, where D has \code{v} columns at v levels.\cr

The construction for strength 4 is based on Theorem 4.13 (default) or on request on Theorem 4.3 (may be better for large \code{k}).

The construction for strength 5 is based on Theorem 4.13 (default) or on request on Theorem 4.11 (may be better for large \code{k}).
}

\section{Warning}{


Function \code{MTVTRouxtypeCA} implements the constructions of Section 4 from Martirosyan and van Trung (2004).
It uses internal workhorse functions that correspond to the different theorems of the section.\cr
Note that the constructions are of the so-called Roux type, i.e., recursive with several
CA ingredients. Such constructions are competitive for very large scenarii only, and when
they get good ingredients.\cr
WARNING: Many ingredients for large situations in this package are (at present) quite poor,\cr
and it is easy to bring the computer to the brink of crash or beyond by naively requesting
a CA of strength 5 for 2000 columns. If in doubt,
check the expected size with \code{N_upper_MTVTRouxtypeCA}; on the author's Windows machine,
the creation of a CA(172792, 5, 1000, 4) by the command \code{MTVTRouxtypeCA(5, 1000, 4)}
was successful after 10 minutes (about half of which were used for the creation of the
largest ingredient with the command \code{powerCA(5, 500, 4)}) and produced an object
of size 1.4GB, with large RAM usage during the slow array generation.\cr
Furthermore, note that the creation of many or even most large arrays requires
an internet connection, as arrays from the NIST (2008) library are involved as
ingredients (in the above case, as ingredients to the \code{powerCA} construction;
without an internet connection, the ingredient size would more than double).\cr
Large arrays are not a priority of this package, so that this situation may remain
unchanged for a long time.
}

\examples{
  dim(D <- MTVTRouxtypeCA(4, 12, 3))
  N_upper_MTVTRouxtypeCA(4,12,3) ## two duplicates were removed
  N_upper_MTVTRouxtypeCA(4,12,3, theoretical=TRUE) ## ingredients are optimal
  coverage(D, 4)
  eCAN(t=4, k=12, v=3)  ## D is far from optimal

  ## the other method is worse for small k
  dim(Dworse <- MTVTRouxtypeCA(4,12,3, method="large"))
  N_upper_MTVTRouxtypeCA(4,12,3, method="large") ## 32 duplicates were removed
  coverage(Dworse, 4)

  dim(D5 <- MTVTRouxtypeCA(5, 10, 4))
  N_upper_MTVTRouxtypeCA(5, 10, 4) ## 48 duplicates were removed
  coverage(D5, 5)
  eCAN(t=5, k=10, v=4)  ## run size of D5 is far from optimal

  dim(Dlarge <- MTVTRouxtypeCA(4, 360, 3))
  N_upper_MTVTRouxtypeCA(4, 360, 3) ## no duplicated rows removed
  dim(Dlarge <- MTVTRouxtypeCA(4, 360, 3, method="large")) ## better
  N_upper_MTVTRouxtypeCA(4, 360, 3, method="large") ## 42 duplicated rows removed
  Ns(4,360,3)  ## not competitive

\dontrun{
## needs an internet connection for downloading two arrays
## and also takes some time for its construction
  N_upper_MTVTRouxtypeCA(5, 100, 4, method="large")
  N_upper_MTVTRouxtypeCA(5, 100, 4) ## better
  N_upper_MTVTRouxtypeCA(5, 100, 4, method="large", theoretical=TRUE)
  N_upper_MTVTRouxtypeCA(5, 100, 4, theoretical=TRUE)
  Ns(5, 100, 4) ## much worse than eCAN, but better than other implemented constructions
  dim(DLarge <- MTVTRouxtypeCA(5, 100, 4, method="large"))
}

}
\references{
Martirosyan and van Trung (2004), NIST (2008)
}
