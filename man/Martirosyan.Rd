% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Martirosyan.R
\name{Martirosyan5}
\alias{Martirosyan5}
\alias{Martirosyan4}
\title{Functions to construct a strength 4 or strength 5 CA from several input CAs}
\usage{
Martirosyan4(A, B, C, start0=TRUE, ...)

Martirosyan5(A, B, C, D, start0=TRUE, ...)
}
\arguments{
\item{A}{a strength 4 or 5 CA in k columns at v levels (0, ..., v-1 or 1, ..., v);
for k<=3, A can be smaller (see Details section).}

\item{B}{a strength 3 or 4 CA in k columns at v levels (0, ..., v-1 or 1, ..., v)}

\item{C}{a strength 2 or 3 CA in k columns at v levels (0, ..., v-1 or 1, ..., v);
for strength 5, it appears that constant rows can be omitted from C, and at least one rows can always be made
constant by permuting levels of some columns.}

\item{D}{a strength 2 CA in k columns at v levels (0, ..., v-1 or 1, ..., v).}

\item{start0}{logical: do the values start at 0? This must hold for all input arrays.}

\item{...}{currently not used}
}
\value{
a strength 4 CA with 2k columns at v levels each (same coding as ingoing CAs)
in \code{N_A + (v-1)*N_B + 2*N_C^2} rows,\cr
or a strength 5 CA with 2k columns at v levels each in
\code{N_A + (v-1)*N_B + 2*N_C*N_D} rows,\cr
where N_array denotes the run
sizes of the arrays
}
\description{
based on Martirosyan and Trung (2004). The functions obtain a strength 4
or strength 5 CA in 2k columns at v levels each from several smaller arrays.
}
\details{
The functions implement the construction listed for general strength t CAs
in Martirosyan and Trung (2004).
The specifically-stated construction for t=4 also worked and yielded the same run size
for the examples considered.
The specific construction for t=5 yielded a larger run size and nevertheless did
not yield 5-coverage, i.e., there seems to be something wrong with it.

For \code{Martirosyan4}: The matrices need the lower of the two strengths, i.e., 4,3 and 2 for A,B,C.

For \code{Martirosyan5}: The matrices need the higher of the two strengths, i.e., 5,4,3,2 for A,B,C,D.

The user is responsible for providing suitable matrices. If the matrices are not adequate, the resulting array may be worse than expected.
}
\examples{
  A <- lhs::createBusht(5,6,4, bRandom=FALSE)
  B <- lhs::createBusht(5,6,3, bRandom=FALSE)
  C <- lhs::createBusht(5,6,2, bRandom=FALSE)
  E <- Martirosyan4(A, B, C)
  coverage(E, 4)
  dim(E)
  eCAN(4, 12, 5)  ## E is far from optimal

  A <- lhs::createBusht(4,5,5, bRandom=FALSE)
  B <- lhs::createBusht(4,5,4, bRandom=FALSE)
  C <- lhs::createBusht(4,5,3, bRandom=FALSE)
  D <- lhs::createBusht(4,5,2, bRandom=FALSE)
  E <- Martirosyan5(A, B, C[-1,], D)  ## omit constant row
  coverage(E, 5)
  dim(E)
  eCAN(4, 12, 5)  ## run size of E is far from optimal,

}
